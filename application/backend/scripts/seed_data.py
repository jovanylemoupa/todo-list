"""
Script pour peupler la base de donn√©es avec des donn√©es de test plus compl√®tes
"""
import sys
import os
from pathlib import Path
from datetime import datetime, timedelta
import random

# Ajouter le chemin racine au Python path
root_dir = Path(__file__).parent.parent
sys.path.append(str(root_dir))

from sqlalchemy.orm import Session
from app.config.database import SessionLocal
from app.models.category import Category
from app.models.task import Task, TaskPriority, TaskStatus

def seed_comprehensive_data():
    """Peupler avec des donn√©es de test compl√®tes"""
    db = SessionLocal()
    
    try:
        # Donn√©es de t√¢ches vari√©es
        task_templates = [
            # T√¢ches professionnelles
            {
                "title": "Pr√©parer la pr√©sentation client",
                "description": "Cr√©er une pr√©sentation PowerPoint pour le client ABC avec les r√©sultats du Q4",
                "priority": TaskPriority.HAUTE,
                "category_name": "Professionnel"
            },
            {
                "title": "Code review du module authentification",
                "description": "R√©viser le code du syst√®me d'authentification avant la mise en production",
                "priority": TaskPriority.MOYENNE,
                "category_name": "Professionnel"
            },
            {
                "title": "R√©union √©quipe d√©veloppement",
                "description": "Stand-up hebdomadaire avec l'√©quipe de d√©veloppement",
                "priority": TaskPriority.BASSE,
                "category_name": "Professionnel"
            },
            
            # T√¢ches personnelles
            {
                "title": "Organiser l'anniversaire de maman",
                "description": "R√©server le restaurant et inviter la famille",
                "priority": TaskPriority.HAUTE,
                "category_name": "Personnel"
            },
            {
                "title": "Nettoyer le garage",
                "description": "Faire le tri et organiser les outils",
                "priority": TaskPriority.BASSE,
                "category_name": "Personnel"
            },
            {
                "title": "Renouveler l'assurance voiture",
                "description": "Comparer les offres et renouveler le contrat",
                "priority": TaskPriority.MOYENNE,
                "category_name": "Personnel"
            },
            
            # T√¢ches de formation
            {
                "title": "Suivre le cours Python avanc√©",
                "description": "Terminer les modules 5 √† 8 du cours en ligne",
                "priority": TaskPriority.MOYENNE,
                "category_name": "Formation"
            },
            {
                "title": "Lire 'Clean Code'",
                "description": "Finir la lecture du livre de Robert Martin",
                "priority": TaskPriority.BASSE,
                "category_name": "Formation"
            },
            
            # T√¢ches de sant√©
            {
                "title": "Prendre RDV ophtalmo",
                "description": "Contr√¥le annuel de la vue - Dr. Dubois",
                "priority": TaskPriority.MOYENNE,
                "category_name": "Sant√©"
            },
            {
                "title": "S√©ance kin√©",
                "description": "R√©√©ducation du genou - Cabinet central",
                "priority": TaskPriority.HAUTE,
                "category_name": "Sant√©"
            },
            
            # Loisirs
            {
                "title": "Planifier les vacances d'√©t√©",
                "description": "Rechercher des destinations et faire les r√©servations",
                "priority": TaskPriority.MOYENNE,
                "category_name": "Loisirs"
            },
            {
                "title": "Inscription club de tennis",
                "description": "S'inscrire au club de tennis local pour la saison",
                "priority": TaskPriority.BASSE,
                "category_name": "Loisirs"
            },
        ]
        
        # R√©cup√©rer les cat√©gories existantes
        categories = {cat.name: cat for cat in db.query(Category).all()}
        
        # Cr√©er les t√¢ches
        created_tasks = []
        for i, task_template in enumerate(task_templates, 1):
            category_name = task_template["category_name"]
            if category_name in categories:
                # G√©n√©rer des dates vari√©es
                days_offset = random.randint(-5, 15)  # Quelques t√¢ches pass√©es, beaucoup futures
                due_date = datetime.now() + timedelta(days=days_offset)
                
                # Quelques t√¢ches termin√©es
                status = TaskStatus.EN_COURS
                completed_at = None
                if random.random() < 0.3:  # 30% de t√¢ches termin√©es
                    status = TaskStatus.TERMINEE
                    completed_at = datetime.now() - timedelta(days=random.randint(1, 7))
                elif random.random() < 0.1:  # 10% report√©es
                    status = TaskStatus.REPORTEE
                
                task = Task(
                    title=task_template["title"],
                    description=task_template["description"],
                    priority=task_template["priority"],
                    status=status,
                    due_date=due_date,
                    completed_at=completed_at,
                    category_id=categories[category_name].id,
                    position=i
                )
                
                # Calculer l'urgence
                task.update_urgency()
                
                db.add(task)
                created_tasks.append(task)
        
        db.commit()
        
        print(f"‚úÖ {len(created_tasks)} t√¢ches de test cr√©√©es avec succ√®s")
        
        # Afficher un r√©sum√©
        print("\nüìä R√©sum√© des donn√©es cr√©√©es :")
        print(f"   - T√¢ches en cours : {len([t for t in created_tasks if t.status == TaskStatus.EN_COURS])}")
        print(f"   - T√¢ches termin√©es : {len([t for t in created_tasks if t.status == TaskStatus.TERMINEE])}")
        print(f"   - T√¢ches report√©es : {len([t for t in created_tasks if t.status == TaskStatus.REPORTEE])}")
        print(f"   - T√¢ches urgentes : {len([t for t in created_tasks if t.is_urgent])}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du peuplement : {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("üå± Peuplement de la base de donn√©es avec des donn√©es de test...")
    seed_comprehensive_data()
    print("‚úÖ Peuplement termin√© !")